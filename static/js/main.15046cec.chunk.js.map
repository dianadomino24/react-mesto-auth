{"version":3,"sources":["images/logo.svg","images/success-icon.svg","images/fail-icon.svg","utils/api.js","components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/Footer.js","utils/utils.js","components/FormValidator.js","components/PopupWithForm.js","components/PopupWithSubmit.js","components/ImagePopup.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/RegisterLoginTemplate.js","utils/auth.js","components/Login.js","utils/token.js","components/ProtectedRoute.js","components/Register.js","components/InfoTooltip.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","api","baseUrl","headers","this","res","ok","json","Promise","reject","Error","status","label","fetch","concat","then","_getResponseData","item","method","body","JSON","stringify","title","cardId","notLiked","replaceItem","deleteItem","id","authorization","Header","onSignOut","email","userEmail","className","href","src","logoPath","alt","path","to","onClick","CurrentUserContext","React","createContext","Card","onCardClick","card","onCardLike","onCardDelete","owner","likes","name","link","currentUserData","useContext","isOwn","_id","cardLikeButtonClassName","some","i","evt","placeEvt","target","closest","length","Main","onEditProfile","onAddPlace","onEditAvatar","handleCardClick","cards","style","backgroundImage","avatar","about","map","key","Footer","formSelectorsObj","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorActiveClass","controlSelector","FormValidator","formElement","_formSelectorsObj","_formElement","_inputList","Array","from","querySelectorAll","_buttonElement","querySelector","_inactiveButtonClass","_inputErrorClass","_errorActiveClass","_controlSelector","inputElement","errorMessage","errorElement","_findInputError","textContent","classList","add","remove","inputElementNoSpacing","value","trim","_isInputWithoutSpacingInvalid","validity","valid","_hideInputError","_showInputError","validationMessage","alert","hasInvalidInput","_toggleButtonState","forEach","addEventListener","_checkInputValidity","_setEventListeners","PopupWithForm","buttonText","isOpen","onClose","onSubmit","children","formValidate","currentForm","document","formValidator","enableValidation","closeReset","reset","window","removeEventListener","handleEscClose","event","currentTarget","noValidate","e","preventDefault","autoFocus","type","PopupWithSubmit","cardDOM","onCardDeleteSubmit","ImagePopup","close","EditProfilePopup","onUpdateUser","currentUser","useState","setName","description","setDescription","useEffect","onChange","placeholder","required","minLength","maxLength","EditAvatarPopup","onUpdateAvatar","avatarInput","useRef","setAvatar","current","ref","AddPlacePopup","cardName","setCardName","cardDescription","setCardDescription","RegisterLoginTemplate","BASE_URL","Login","handleLogin","password","data","setData","history","useHistory","message","setMessage","handleChange","prevData","Accept","response","console","log","catch","err","auth","token","localStorage","setItem","setToken","push","ProtectedRoute","Component","component","props","loggedIn","Register","handleRegisterSuccess","handleRegisterFail","infoTooltipOpen","InfoTooltip","isSuccess","success","fail","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isCardDeletePopupOpen","setIsCardDeletePopupOpen","isImgPopupOpen","setIsImgPopupOpen","isInfoTooltipOpen","setInfoTooltipOpen","setCards","setCurrentUser","selectedCard","setSelectedCard","selectedCardDOM","setSelectedCardDOM","setUserEmail","setLoggedIn","registerSuccess","setRegisterSuccess","closeAllPopups","inputErrors","error","cleanInputErrors","renderLoading","isLoading","button","text","all","getItems","values","userData","serverCards","items","tokenCheck","jwt","getItem","Authorization","userCurrentEmail","Provider","removeItem","isLiked","changeLikeCardStatus","newCard","newCards","c","cardDOMElement","profileSubmitButton","changeItem","finally","placeSubmitButton","createItem","avatarSubmitButton","cardDeleteSubmitButton","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15046cec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a56cd5e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/success-icon.e38b395c.svg\";","module.exports = __webpack_public_path__ + \"static/media/fail-icon.4072126c.svg\";","class Api {\n    constructor({ baseUrl, headers }) {\n        this.baseUrl = baseUrl\n        this.headers = headers\n    }\n\n    _getResponseData(res) {\n        if (res.ok) {\n            return res.json()\n        }\n        return Promise.reject(new Error(`Ошибка: ${res.status}`))\n    }\n    getItems(label) {\n        return fetch(this.baseUrl.concat(label), {\n            headers: this.headers,\n        }).then((res) => {\n            return this._getResponseData(res)\n        })\n    }\n\n    createItem(item, label) {\n        return fetch(this.baseUrl.concat(label), {\n            method: 'POST',\n            headers: this.headers,\n            body: JSON.stringify(item),\n        }).then((res) => {\n            return this._getResponseData(res)\n        })\n    }\n\n    changeItem(item, title) {\n        return fetch(this.baseUrl.concat(title), {\n            method: 'PATCH',\n            headers: this.headers,\n            body: JSON.stringify(item),\n        }).then((res) => {\n            return this._getResponseData(res)\n        })\n    }\n\n    changeLikeCardStatus(cardId, notLiked) {\n        if (notLiked) {\n            return this.replaceItem('cards/likes', cardId)\n        } else {\n            return this.deleteItem('cards/likes', cardId)\n        }\n    }\n\n    replaceItem(title, id) {\n        return fetch(this.baseUrl.concat(title).concat(`/${id}`), {\n            method: 'PUT',\n            headers: this.headers,\n            // body: JSON.stringify(item)\n        }).then((res) => {\n            return this._getResponseData(res)\n        })\n    }\n\n    deleteItem(title, id) {\n        return fetch(this.baseUrl.concat(title).concat(`/${id}`), {\n            method: 'DELETE',\n            headers: this.headers,\n        }).then((res) => {\n            return this._getResponseData(res)\n        })\n    }\n}\n\nconst token = '3829caf2-6683-412f-9e00-d0870fcd1817'\nconst cohort = 'cohort-14'\n\nconst api = new Api({\n    baseUrl: `https://mesto.nomoreparties.co/v1/${cohort}/`,\n    headers: {\n        authorization: token,\n        'Content-Type': 'application/json',\n    },\n})\n\nexport default api\n\n//  - получить список всех карточек в виде массива (GET)\n//  - добавить карточку (POST)\n//  - удалить карточку (DELETE)\n//  - получить данные пользователя (GET)\n//  - заменить данные пользователя (PATCH)\n//  - заменить аватар (PATCH)\n//  - “залайкать” карточку (PUT)\n//  - удалить лайк карточки (DELETE)\n","import React from 'react'\nimport logoPath from '../images/logo.svg'\nimport { Route, Switch, Link } from 'react-router-dom'\n\nfunction Header({ onSignOut, userEmail }) {\n    const { email } = userEmail\n    return (\n        <header className=\"header page__header section\">\n            <a href=\"/\" className=\"logo header__logo\">\n                <img\n                    className=\"logo__image\"\n                    src={logoPath}\n                    alt=\"Логотип проекта Mesto\"\n                />\n            </a>\n            <Switch>\n                <Route path=\"/sign-up\">\n                    <Link to=\"./sign-in\" className=\"link header__link\">\n                        Вход\n                    </Link>\n                </Route>\n                <Route path=\"/sign-in\">\n                    <Link to=\"./sign-up\" className=\"link header__link\">\n                        Регистрация\n                    </Link>\n                </Route>\n                <Route path=\"/\">\n                    <div className=\"header__user-info\">\n                        <p className=\"header__email\">{email}</p>\n                        <button onClick={onSignOut} className=\"header__button\">\n                            Выйти\n                        </button>\n                    </div>\n                </Route>\n            </Switch>\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\r\n\r\nexport const CurrentUserContext = React.createContext()\r\n","import React from 'react'\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\n\nexport default function Card({\n    onCardClick,\n    card,\n    onCardLike,\n    onCardDelete,\n    owner,\n    likes,\n    name,\n    link,\n}) {\n    // будет открывать попап с картинкой\n    function handleClick() {\n        onCardClick(card)\n    }\n    function handleLike() {\n        onCardLike(card)\n    }\n    function handleDelete(evt) {\n        //сохраняет дом элемент, который надо будет удалить из разметки\n        const placeEvt = evt.target.closest('.places__item')\n        onCardDelete(card, placeEvt)\n    }\n    const currentUserData = React.useContext(CurrentUserContext)\n\n    // Определяем, являемся ли мы владельцем текущей карточки\n    const isOwn = owner._id === currentUserData._id\n\n    // Определяем, есть ли у карточки лайк, поставленный текущим пользователем\n    const isLiked = likes.some((i) => i._id === currentUserData._id)\n\n    // Создаём переменную, которую после зададим в `className` для кнопки лайка\n    const cardLikeButtonClassName = isLiked\n        ? 'place__like-button place__like-button_active'\n        : 'place__like-button'\n\n    return (\n        <li className=\"places__item\">\n            <figure className=\"place\">\n                {/* проверит, моя ли карточка и отключит кнопку удаления у чужих */}\n                <button\n                    className={\n                        isOwn\n                            ? 'link place__delete-button'\n                            : 'link place__delete-button place__delete-button_disabled'\n                    }\n                    onClick={handleDelete}\n                />\n                <img\n                    src={link}\n                    alt={name}\n                    className=\"place__image\"\n                    onClick={handleClick}\n                />\n                <div className=\"place__wrapper\">\n                    <h2 className=\"place__name\">{name} </h2>\n                    <button className=\"place__like-button-container\">\n                        {/* проверит, залайкана ли мной ранее карточка*/}\n                        <div\n                            className={cardLikeButtonClassName}\n                            onClick={handleLike}\n                        ></div>\n                        <div className=\"place__like-counter\">\n                            {likes.length}\n                        </div>\n                    </button>\n                </div>\n            </figure>\n        </li>\n    )\n}\n","import React from 'react'\nimport Card from './Card'\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\n\nfunction Main({\n    onEditProfile,\n    onAddPlace,\n    onEditAvatar,\n    handleCardClick,\n    cards,\n    onCardLike,\n    onCardDelete,\n    ...rest\n}) {\n    const currentUserData = React.useContext(CurrentUserContext)\n\n    return (\n        <main className=\"content page__content section\">\n            <section className=\"profile section\">\n                <div\n                    className=\"profile__image\"\n                    onClick={onEditAvatar}\n                    style={{\n                        backgroundImage: `url(${currentUserData.avatar})`,\n                    }}\n                ></div>\n                <div className=\"profile__info\">\n                    <div className=\"profile__name-wrap\">\n                        <h1 className=\"profile__name\">\n                            {currentUserData.name}\n                        </h1>\n                        <button\n                            className=\"link profile__edit-button\"\n                            onClick={onEditProfile}\n                        />\n                    </div>\n                    <p className=\"profile__job\">{currentUserData.about}</p>\n                </div>\n                <button\n                    className=\"link profile__add-button\"\n                    onClick={onAddPlace}\n                />\n            </section>\n            <section className=\"places section\">\n                <ul className=\"places__list\">\n                    <li className=\"places__empty-list\">Нет добавленных мест</li>\n                    {cards.map((card) => (\n                        <Card\n                            key={card._id}\n                            onCardClick={handleCardClick}\n                            card={card}\n                            onCardLike={onCardLike}\n                            onCardDelete={onCardDelete}\n                            {...card}\n                        />\n                    ))}\n                </ul>\n            </section>\n        </main>\n    )\n}\n\nexport default Main\n\n// // для проверки, есть ли в списке картинки, если нет, то делает видимой надпись о пустом списке\n// //в placesList всегда есть минимум 1 элемент - надпись о пустом списке\n// function check() {\n//     const placesList = document.querySelector('.places__list')\n//     return (placesList.children.length === 1? \"places__empty-list places__empty-list_visible\" : \"places__empty-list\")\n// }\n","import React from 'react'\n\nfunction Footer() {\n    return (\n        <footer className=\"footer section page__footer\">\n            <p className=\"footer__copyright\">&copy; 2020 Mesto Russia</p>\n        </footer>\n    )\n}\n\nexport default Footer\n","// объект настроек с селекторами и классами формы\nexport const formSelectorsObj = {\n    formSelector: '.popup__form',\n    inputSelector: '.popup__input',\n    submitButtonSelector: '.popup__save-button',\n    inactiveButtonClass: 'popup__save-button_disabled',\n    inputErrorClass: '.popup__input-error',\n    errorActiveClass: 'popup__input-error_active',\n    controlSelector: '.popup__label',\n}\n","//кейсы проверки валидности\nconst VALID = 0\nconst INVALID_EMPTY = 1\nconst INVALID_TOOSHORT = 2\n\n//скрывает уведомления об ошибках в инпутах (используется на открытом попапе в index.js)\nexport function cleanInputErrors() {\n    const inputErrors = document.querySelectorAll('.popup__input-error')\n\n    if (inputErrors) {\n        inputErrors.forEach((error) =>\n            error.classList.remove('popup__input-error_active')\n        )\n    }\n}\n\nexport class FormValidator {\n    constructor(formSelectorsObj, formElement) {\n        this._formSelectorsObj = formSelectorsObj\n        this._formElement = formElement\n        this._inputList = Array.from(\n            formElement.querySelectorAll(formSelectorsObj.inputSelector)\n        )\n        this._buttonElement = formElement.querySelector(\n            formSelectorsObj.submitButtonSelector\n        )\n        this._inactiveButtonClass = formSelectorsObj.inactiveButtonClass\n        this._inputErrorClass = formSelectorsObj.inputErrorClass\n        this._errorActiveClass = formSelectorsObj.errorActiveClass\n        this._controlSelector = formSelectorsObj.controlSelector\n    }\n\n    // находит элемент ошибки в ближайшем к текущему инпуту лэйбле\n    _findInputError(inputElement) {\n        return inputElement\n            .closest(this._controlSelector)\n            .querySelector(this._inputErrorClass)\n    }\n\n    //показывает сообщение об ошибке\n    _showInputError(inputElement, errorMessage) {\n        const errorElement = this._findInputError(inputElement)\n        errorElement.textContent = errorMessage\n        errorElement.classList.add(this._errorActiveClass)\n    }\n\n    //скрывает сообщение об ошибке\n    _hideInputError(inputElement) {\n        const errorElement = this._findInputError(inputElement)\n        errorElement.classList.remove(this._errorActiveClass)\n        errorElement.textContent = ''\n    }\n\n    //проверяет длину инпутов, очищенных от пробелов\n    _isInputWithoutSpacingInvalid(inputElement) {\n        const inputElementNoSpacing = inputElement.value.trim()\n\n        if (inputElementNoSpacing.length === 0) {\n            return INVALID_EMPTY\n        }\n        //если введено меньше 2 символов\n        if (inputElementNoSpacing.length < 2) {\n            return INVALID_TOOSHORT\n        }\n        return VALID\n    }\n\n    //проверяет валидность инпутов с учетом пробелов и выводит на стр соответствующие ошибки\n    _checkInputValidity(inputElement) {\n        const errorElement = this._findInputError(inputElement)\n\n        switch (this._isInputWithoutSpacingInvalid(inputElement)) {\n            //если поле пусто, не считая пробелы\n            case INVALID_EMPTY:\n                errorElement.textContent = 'Заполните это поле.'\n                errorElement.classList.add(this._errorActiveClass)\n                break\n            //если выбросить пробелы и в поле 1 символ\n            case INVALID_TOOSHORT:\n                errorElement.textContent =\n                    'Текст должен быть не короче 2 симв. Длина текста сейчас: 1 символ.'\n                errorElement.classList.add(this._errorActiveClass)\n                break\n            //если без пробелов в поле 2 символа, то проверим их валидность\n            case VALID:\n                if (!inputElement.validity.valid) {\n                    this._showInputError(\n                        inputElement,\n                        inputElement.validationMessage\n                    )\n                } else {\n                    this._hideInputError(inputElement)\n                }\n                break\n\n            default:\n                alert('error')\n        }\n    }\n\n    //вернет true, если есть невалидный инпут (с учетом проверки пробелов)\n    hasInvalidInput() {\n        return this._inputList.some((inputElement) => {\n            return (\n                !inputElement.validity.valid ||\n                this._isInputWithoutSpacingInvalid(inputElement)\n            )\n        })\n    }\n\n    //(раз)блокирует кнопку submit, если есть невалидные инпуты\n    _toggleButtonState() {\n        if (this.hasInvalidInput()) {\n            this._buttonElement.classList.add(this._inactiveButtonClass)\n        } else {\n            this._buttonElement.classList.remove(this._inactiveButtonClass)\n        }\n    }\n\n    _setEventListeners() {\n        //устанавливает состояние кнопки submit еще до изменения инпутов\n        this._toggleButtonState()\n        //прослушки для инпутов\n        this._inputList.forEach((inputElement) => {\n            inputElement.addEventListener('input', () => {\n                this._checkInputValidity(inputElement)\n                this._toggleButtonState()\n            })\n        })\n    }\n    enableValidation() {\n        this._setEventListeners()\n    }\n}\n","import React from 'react'\nimport { formSelectorsObj } from '../utils/utils'\nimport { FormValidator } from './FormValidator'\n\nfunction PopupWithForm({\n    title,\n    name,\n    buttonText,\n    isOpen,\n    onClose,\n    onSubmit,\n    children,\n}) {\n    function formValidate() {\n        if (isOpen) {\n            const currentForm = document.querySelector(\n                `.popup__form_type_${name}`\n            )\n            // будет валидировать форму\n            const formValidator = new FormValidator(\n                formSelectorsObj,\n                currentForm\n            )\n            formValidator.enableValidation()\n            return !formValidator.hasInvalidInput()\n        }\n    }\n    formValidate()\n\n    // очистит форму от введенного в инпут текста, ошибок валидации и закроет попап\n    function closeReset() {\n        document.querySelector(`.popup__form_type_${name}`).reset()\n        onClose()\n        window.removeEventListener('keydown', handleEscClose)\n    }\n    //закрывает при нажатии esc\n    function handleEscClose(evt) {\n        if (evt.key === 'Escape') {\n            closeReset()\n        }\n    }\n    //закрывает попап при нажатии на фон\n    function closePopupByClickingOverlay(event) {\n        if (event.target === event.currentTarget) {\n            closeReset()\n        }\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault()\n        if (formValidate()) {\n            onSubmit(e)\n            document.querySelector(`.popup__form_type_${name}`).reset()\n        }\n    }\n    // проверяет нажатие esc\n    if (isOpen) {\n        window.addEventListener('keydown', (evt) => handleEscClose(evt))\n    }\n\n    return (\n        <section\n            className={`popup popup_type_form popup_type_${name} ${\n                isOpen && 'popup_opened'\n            }`}\n            onClick={closePopupByClickingOverlay}\n        >\n            <div className=\"popup__container\">\n                <button\n                    className=\"link popup__close-button\"\n                    onClick={closeReset}\n                />\n                <form\n                    className={`popup__form popup__form_type_${name}`}\n                    noValidate\n                    name={name}\n                    onSubmit={handleSubmit}\n                >\n                    <h2 className=\"popup__title\">{title}</h2>\n                    <fieldset className=\"popup__fieldset\">\n                        {children}\n                        <button\n                            className={`link popup__save-button popup__save-button_type_${name}`}\n                            autoFocus\n                            type=\"submit\"\n                        >\n                            {buttonText}\n                        </button>\n                    </fieldset>\n                </form>\n            </div>\n        </section>\n    )\n}\n\nexport default PopupWithForm\n","import React from 'react'\nimport PopupWithForm from './PopupWithForm'\n\nfunction PopupWithSubmit({\n    title,\n    name,\n    card,\n    cardDOM,\n    buttonText,\n    isOpen,\n    onClose,\n    onCardDeleteSubmit,\n}) {\n    function handleSubmit(e) {\n        // Запрещаем браузеру переходить по адресу формы\n        e.preventDefault()\n        onCardDeleteSubmit(card, cardDOM)\n    }\n    return (\n        <PopupWithForm\n            title={title}\n            name={name}\n            buttonText={buttonText}\n            isOpen={isOpen}\n            onClose={onClose}\n            onSubmit={handleSubmit}\n        ></PopupWithForm>\n    )\n}\n\nexport default PopupWithSubmit\n","import React from 'react'\n\nfunction ImagePopup({ card, onClose, isOpen, name }) {\n    function close() {\n        onClose()\n        window.removeEventListener('keydown', handleEscClose)\n    }\n    //закрывает при нажатии esc\n    function handleEscClose(evt) {\n        if (evt.key === 'Escape') {\n            close()\n        }\n    }\n    //закрывает попап при нажатии на фон\n    function closePopupByClickingOverlay(event) {\n        if (event.target === event.currentTarget) {\n            close()\n        }\n    }\n\n    if (card) {\n        window.addEventListener('keydown', handleEscClose)\n\n        return (\n            <section\n                className={`popup popup_type_${name} ${\n                    isOpen && 'popup_opened'\n                }`}\n                onClick={closePopupByClickingOverlay}\n            >\n                <div className=\"popup__container-pic-zoom\">\n                    <button\n                        className=\"link popup__close-button\"\n                        onClick={close}\n                    />\n                    <figure className=\"picture-zoom\">\n                        <img\n                            src={card.link}\n                            alt={card.name}\n                            className=\"picture-zoom__img\"\n                        />\n                        <p className=\"picture-zoom__title\">{card.name}</p>\n                    </figure>\n                </div>\n            </section>\n        )\n    } else return ''\n}\n\nexport default ImagePopup\n","import React, { useState, useEffect } from 'react'\nimport PopupWithForm from './PopupWithForm'\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\n\nfunction EditProfilePopup({ isOpen, onClose, onUpdateUser }) {\n    const currentUser = React.useContext(CurrentUserContext)\n\n    // для заполнения инпутов текущими данными пользователя\n    const [name, setName] = useState('')\n    const [description, setDescription] = useState('')\n\n    // После загрузки текущего пользователя из API\n    // его данные будут использованы в управляемых компонентах.\n    useEffect(() => {\n        setName(currentUser.name)\n        setDescription(currentUser.about)\n    }, [currentUser])\n    // при введении текста в инпут будет обновлять стейт\n    function handleNameChange(e) {\n        setName(e.target.value)\n    }\n    function handleDescribChange(e) {\n        setDescription(e.target.value)\n    }\n\n    function handleClose() {\n        // если изменены инпуты, но не засабмичены, то не станет сохранять их values ????????????????????????\n        setName(currentUser.name)\n        setDescription(currentUser.about)\n\n        onClose()\n    }\n\n    function handleSubmit(e) {\n        // Запрещаем браузеру переходить по адресу формы\n        e.preventDefault()\n\n        // Передаём значения управляемых компонентов во внешний обработчик\n        onUpdateUser({\n            name,\n            about: description,\n        })\n    }\n\n    return (\n        <PopupWithForm\n            title=\"Редактировать профиль\"\n            name=\"edit-profile\"\n            buttonText=\"Сохранить\"\n            isOpen={isOpen}\n            onClose={handleClose}\n            onSubmit={handleSubmit}\n        >\n            <label className=\"popup__label\">\n                <input\n                    type=\"text\"\n                    value={name}\n                    onChange={handleNameChange}\n                    name=\"profile-name\"\n                    placeholder=\"Имя\"\n                    id=\"profile-name\"\n                    className=\"input popup__input popup__input_type_name\"\n                    required\n                    minLength=\"2\"\n                    maxLength=\"40\"\n                />\n                <span className=\"popup__input-error js-popup__input-error_type_profile\"></span>\n            </label>\n            <label className=\"popup__label\">\n                <input\n                    type=\"text\"\n                    value={description}\n                    onChange={handleDescribChange}\n                    name=\"profile-job\"\n                    id=\"profile-job\"\n                    placeholder=\"Род деятельности\"\n                    className=\"input popup__input popup__input_type_job\"\n                    required\n                    minLength=\"2\"\n                    maxLength=\"200\"\n                />\n                <span className=\"popup__input-error js-popup__input-error_type_profile\"></span>\n            </label>\n        </PopupWithForm>\n    )\n}\n\nexport default EditProfilePopup\n","import React, { useState, useRef } from 'react'\nimport PopupWithForm from './PopupWithForm'\n\nfunction EditAvatarPopup({ isOpen, onClose, onUpdateAvatar }) {\n    const avatarInput = useRef({})\n    const [avatar, setAvatar] = useState('')\n\n    function handleChange(e) {\n        setAvatar(e.target.value)\n    }\n    function handleSubmit(e) {\n        onUpdateAvatar({\n            avatar: avatarInput.current.value,\n        })\n    }\n\n    return (\n        <PopupWithForm\n            title=\"Обновить аватар\"\n            name=\"edit-avatar\"\n            buttonText=\"Сохранить\"\n            isOpen={isOpen}\n            onClose={onClose}\n            onSubmit={handleSubmit}\n        >\n            <label className=\"popup__label\">\n                <input\n                    ref={avatarInput}\n                    onChange={handleChange}\n                    type=\"url\"\n                    name=\"avatar\"\n                    id=\"avatar\"\n                    placeholder=\"Ссылка на картинку\"\n                    className=\"input popup__input popup__input_type_avatar\"\n                    required\n                />\n                <span className=\"popup__input-error\"></span>\n            </label>\n        </PopupWithForm>\n    )\n}\n\nexport default EditAvatarPopup\n","import React, { useState } from 'react'\nimport PopupWithForm from './PopupWithForm'\n\nfunction AddPlacePopup({ isOpen, onClose, onAddPlace }) {\n    const [cardName, setCardName] = useState('')\n    const [cardDescription, setCardDescription] = useState('')\n\n    function handleSubmit(e) {\n        e.preventDefault()\n\n        onAddPlace({\n            name: cardName,\n            link: cardDescription,\n        })\n        setCardName('')\n        setCardDescription('')\n    }\n\n    function handleNameChange(e) {\n        setCardName(e.target.value)\n    }\n    function handleDescibChange(e) {\n        setCardDescription(e.target.value)\n    }\n    function close() {\n        setCardName('')\n        setCardDescription('')\n        onClose()\n    }\n\n    return (\n        <PopupWithForm\n            title=\"Новое место\"\n            name=\"add-place\"\n            buttonText=\"Создать\"\n            isOpen={isOpen}\n            onClose={close}\n            onSubmit={handleSubmit}\n        >\n            <label className=\"popup__label\">\n                <input\n                    type=\"text\"\n                    value={cardName}\n                    onChange={handleNameChange}\n                    name=\"place-name\"\n                    placeholder=\"Название\"\n                    id=\"place-name\"\n                    className=\"input popup__input popup__input_type_place-name\"\n                    required\n                    minLength=\"2\"\n                    maxLength=\"30\"\n                />\n                <span className=\"popup__input-error\"></span>\n            </label>\n            <label className=\"popup__label\">\n                <input\n                    type=\"url\"\n                    value={cardDescription}\n                    onChange={handleDescibChange}\n                    name=\"place-pic\"\n                    id=\"place-pic\"\n                    placeholder=\"Ссылка на картинку\"\n                    className=\"input popup__input popup__input_type_place-pic\"\n                    required\n                />\n                <span className=\"popup__input-error\"></span>\n            </label>\n        </PopupWithForm>\n    )\n}\n\nexport default AddPlacePopup\n","import React from 'react'\n\nfunction RegisterLoginTemplate({ title, children, onSubmit }) {\n    return (\n        <>\n            <section className=\"popup__register-login\">\n                <section className=\"popup__container-register-login\">\n                    <form\n                        className=\"popup__form\"\n                        noValidate\n                        onSubmit={onSubmit}\n                    >\n                        <h2 className=\"popup__title popup__title_type_login\">\n                            {title}\n                        </h2>\n                        <fieldset className=\"popup__fieldset\">\n                            {children}\n                        </fieldset>\n                    </form>\n                </section>\n            </section>\n        </>\n    )\n}\n\nexport default RegisterLoginTemplate\n","export const BASE_URL = 'https://auth.nomoreparties.co'\n\nexport const register = (email, password) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n    })\n        .then((response) => {\n            try {\n                if (response.status === 201) {\n                    return response.json()\n                }\n            } catch (e) {\n                return e\n            }\n        })\n        .then((res) => {\n            return res\n        })\n        .catch((err) => console.log(`auth register error: ${err}`))\n}\n\nexport const authorize = (email, password) => {\n\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n    })\n        .then((response) => response.json()\n        )\n        .then((data) => {\n          if (!data) {\n            console.log(`auth пользователь с email не найден : ${data}`)\n          }\n\n            if (data) {\n\n                return data\n            } else {\n                return\n            }\n        })\n        .catch((err) => console.log(`auth authorize error: ${err}`))\n}\n\nexport const getContent = (token) => {\n    return fetch(`${BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`,\n        },\n    }).then((res) => res.json())\n}\n","import React, { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport RegisterLoginTemplate from './RegisterLoginTemplate'\nimport * as auth from '../utils/auth.js'\nimport { setToken } from '../utils/token'\n\nconst Login = ({ handleLogin }) => {\n    const [data, setData] = useState({\n        email: '',\n        password: '',\n    })\n    const history = useHistory()\n    const [message, setMessage] = useState('')\n\n    const handleChange = (e) => {\n        const { name, value } = e.target\n        setData((prevData) => ({\n            ...prevData,\n            [name]: value,\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        const { email, password } = data\n\n        if (!email || !password) {\n            return\n        }\n\n        auth.authorize(email, password)\n            .then((data) => {\n                if (!data) {\n                    setMessage('Что-то пошло не так при авторизации в Login!')\n                }\n                if (data.token) {\n                    setToken(data.token)\n                    setMessage('')\n                    handleLogin(email)\n                    history.push('/')\n                }\n            })\n            .then(() => setData({ email: '', password: '' }))\n            .catch((err) => console.log(err))\n    }\n\n    return (\n        <div className=\"login\">\n            <RegisterLoginTemplate title=\"Вход\" onSubmit={handleSubmit}>\n                <label className=\"popup__label\">\n                    <input\n                        type=\"email\"\n                        value={data.email}\n                        onChange={handleChange}\n                        name=\"email\"\n                        placeholder=\"Email\"\n                        id=\"email\"\n                        className=\"input popup__input popup__input_type_dark\"\n                        required\n                        minLength=\"2\"\n                        maxLength=\"320\"\n                    />\n                    <span className=\"popup__input-error\">{message}</span>\n                </label>\n                <label className=\"popup__label\">\n                    <input\n                        type=\"password\"\n                        value={data.password}\n                        onChange={handleChange}\n                        name=\"password\"\n                        id=\"password\"\n                        placeholder=\"Пароль\"\n                        className=\"input popup__input popup__input_type_dark\"\n                        required\n                        minLength=\"2\"\n                        maxLength=\"200\"\n                    />\n                    <span className=\"popup__input-error\">{message}</span>\n                </label>\n                <button\n                    className=\"link popup__save-button popup__save-button_type_dark\"\n                    autoFocus\n                    type=\"submit\"\n                >\n                    Войти\n                </button>\n            </RegisterLoginTemplate>\n        </div>\n    )\n}\n\nexport default Login\n","const TOKEN_KEY = 'jwt'\n\nexport const setToken = (token) => {\n    localStorage.setItem(TOKEN_KEY, token)\n}\n\nexport const getToken = () => localStorage.getItem(TOKEN_KEY)\n\nexport const removeToken = () => {\n    localStorage.removeItem(TOKEN_KEY)\n}\n","import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n\nconst ProtectedRoute = ({ component: Component, ...props }) => {\n    return (\n        <Route>\n            {() =>\n                props.loggedIn === true ? (\n                    <Component {...props} />\n                ) : (\n                    // <Redirect to=\"./sign-in?redirect=/\" />\n                    <Redirect to=\"./sign-up\" />\n                )\n            }\n        </Route>\n    )\n}\n\nexport default ProtectedRoute\n","import React, { useState } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport RegisterLoginTemplate from './RegisterLoginTemplate'\nimport * as auth from '../utils/auth.js'\nimport { formSelectorsObj } from '../utils/utils'\nimport { FormValidator } from './FormValidator'\n\nconst Register = ({\n    handleRegisterSuccess,\n    handleRegisterFail,\n    infoTooltipOpen,\n}) => {\n    const [data, setData] = useState({\n        email: '',\n        password: '',\n    })\n    const history = useHistory()\n    const [message, setMessage] = useState('')\n\n    const handleChange = (e) => {\n        const { name, value } = e.target\n        setData((prevData) => ({\n            ...prevData,\n            [name]: value,\n        }))\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        const { email, password } = data\n\n        auth.register(email, password).then((res) => {\n            if (res) {\n                if (res.data) {\n                    setMessage('')\n                    handleRegisterSuccess()\n                    infoTooltipOpen()\n                    history.push('/sign-in')\n                } else if (res.status === 400) {\n                    setMessage('Неверно введены данные в Register')\n                    handleRegisterFail()\n                    infoTooltipOpen()\n                }\n            } else {\n                setMessage('Ошибка при регистрации в Register')\n                handleRegisterFail()\n                infoTooltipOpen()\n            }\n        })\n    }\n\n    return (\n        <div className=\"register\">\n            <RegisterLoginTemplate\n                // name=\"login\"\n                title=\"Регистрация\"\n                onSubmit={handleSubmit}\n            >\n                <label className=\"popup__label\">\n                    <input\n                        type=\"email\"\n                        value={data.email}\n                        onChange={handleChange}\n                        name=\"email\"\n                        placeholder=\"Email\"\n                        id=\"email\"\n                        className=\"input popup__input popup__input_type_dark\"\n                        required\n                        minLength=\"2\"\n                        maxLength=\"320\"\n                    />\n                    <span className=\"popup__input-error popup__input-error_active\">\n                        {message}\n                    </span>\n                </label>\n                <label className=\"popup__label\">\n                    <input\n                        type=\"password\"\n                        value={data.password}\n                        onChange={handleChange}\n                        name=\"password\"\n                        id=\"password\"\n                        placeholder=\"Пароль\"\n                        className=\"input popup__input popup__input_type_dark\"\n                        required\n                        minLength=\"2\"\n                        maxLength=\"200\"\n                    />\n                    <span className=\"popup__input-error popup__input-error_active\">\n                        {message}\n                    </span>\n                </label>\n                <button\n                    className=\"link popup__save-button popup__save-button_type_dark\"\n                    autoFocus\n                    type=\"submit\"\n                >\n                    Зарегистрироваться\n                </button>\n                <Link to=\"/sign-in\" className=\"link popup__login-link\">\n                    Уже зарегистрированны? Войти\n                </Link>\n            </RegisterLoginTemplate>\n        </div>\n    )\n}\n\nexport default Register\n","import React from 'react'\nimport success from '../images/success-icon.svg'\nimport fail from '../images/fail-icon.svg'\n\nfunction InfoTooltip({ isOpen, onClose, isSuccess }) {\n    // проверяет нажатие esc\n    if (isOpen) {\n        window.addEventListener('keydown', (evt) => handleEscClose(evt))\n    }\n    function closeReset() {\n        onClose()\n        window.removeEventListener('keydown', handleEscClose)\n    }\n    //закрывает при нажатии esc\n    function handleEscClose(evt) {\n        if (evt.key === 'Escape') {\n            closeReset()\n        }\n    }\n    //закрывает попап при нажатии на фон\n    function closePopupByClickingOverlay(event) {\n        if (event.target === event.currentTarget) {\n            closeReset()\n        }\n    }\n\n    return (\n        <>\n            <section\n                className={`popup popup_type_form ${isOpen && 'popup_opened'}`}\n                onClick={closePopupByClickingOverlay}\n            >\n                <div className=\"popup__container\">\n                    {isSuccess ? (\n                        <>\n                            <img\n                                src={success}\n                                alt=\"Галочка\"\n                                className=\"popup__infotool-img\"\n                            />\n                            <p className=\"popup__infotool-text\">\n                                Вы успешно зарегистрировались!\n                            </p>\n                        </>\n                    ) : (\n                        <>\n                            <img\n                                src={fail}\n                                alt=\"Красный крестик\"\n                                className=\"popup__infotool-img\"\n                            />\n                            <p className=\"popup__infotool-text\">\n                                Что-то пошло не так. Попробуйте ещё раз!\n                            </p>\n                        </>\n                    )}\n                    <button\n                        className=\"popup__close-button\"\n                        onClick={onClose}\n                    ></button>\n                </div>\n            </section>\n        </>\n    )\n}\n\nexport default InfoTooltip\n","import React, { useEffect, useState } from 'react'\nimport api from '../utils/api'\nimport Header from './Header'\nimport Main from './Main'\nimport Footer from './Footer'\nimport PopupWithSubmit from './PopupWithSubmit'\nimport ImagePopup from './ImagePopup'\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\nimport EditProfilePopup from './EditProfilePopup'\nimport EditAvatarPopup from './EditAvatarPopup'\nimport AddPlacePopup from './AddPlacePopup'\nimport { cleanInputErrors } from './FormValidator'\nimport { Route, Switch, useHistory } from 'react-router-dom'\nimport Login from './Login'\nimport ProtectedRoute from './ProtectedRoute'\nimport Register from './Register'\nimport InfoTooltip from './InfoTooltip'\nimport * as auth from '../utils/auth.js'\nimport { getToken, removeToken } from '../utils/token'\n\nfunction App() {\n    //состояние попапов\n    const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false)\n    const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false)\n    const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false)\n    const [isCardDeletePopupOpen, setIsCardDeletePopupOpen] = useState(false)\n    const [isImgPopupOpen, setIsImgPopupOpen] = useState(false)\n    const [isInfoTooltipOpen, setInfoTooltipOpen] = useState(false)\n\n    const [cards, setCards] = useState([])\n\n    const profileAvatarSelector = '.profile__image'\n    // Данные текущего пользователя будут использованы как контекст (пока не пришли даннные с сервера покажет Жака)\n    const [currentUser, setCurrentUser] = useState({\n        name: 'Жак Ив Кусто',\n        about: 'Мореплаватель',\n        avatar:\n            'https://kaskad.tv/images/2020/foto_zhak_iv_kusto__-_interesnie_fakti_20190810_2078596433.jpg',\n    })\n    // для попапа с полноразмерной картинкой\n    const [selectedCard, setSelectedCard] = useState()\n    // для удаления карточки\n    const [selectedCardDOM, setSelectedCardDOM] = useState()\n\n    const [userEmail, setUserEmail] = useState({ email: '' })\n    const [loggedIn, setLoggedIn] = useState(false)\n    const history = useHistory()\n    const [registerSuccess, setRegisterSuccess] = useState(false)\n\n    // открывают попапы\n    function handleEditAvatarClick() {\n        setIsEditAvatarPopupOpen(true)\n    }\n    function handleEditProfileClick() {\n        setIsEditProfilePopupOpen(true)\n    }\n    function handleAddPlaceClick() {\n        setIsAddPlacePopupOpen(true)\n    }\n\n    //для открытия попапа с увеличенной картинкой\n    function handleCardClick(card) {\n        setSelectedCard(card)\n        setIsImgPopupOpen(true)\n    }\n\n    // закрывает все попапы меняя их состояние\n    function closeAllPopups() {\n        //убирает уведомления об ошибках от предыдущих инпутов\n        cleanInputErrors()\n\n        setIsEditAvatarPopupOpen(false)\n        setIsEditProfilePopupOpen(false)\n        setIsAddPlacePopupOpen(false)\n        setSelectedCard()\n        setIsCardDeletePopupOpen(false)\n        setIsImgPopupOpen(false)\n        setSelectedCardDOM()\n        setInfoTooltipOpen(false)\n    }\n\n    // при монтировании компонента будет совершать запрос в API за пользовательскими данными и карточками\n    useEffect(() => {\n        Promise.all([api.getItems('users/me'), api.getItems('cards')])\n            .then((values) => {\n                const [userData, serverCards] = values\n                // отображает данные пользователья в профиле\n                setCurrentUser(userData)\n\n                // отобразит карточки с сервера\n                const items = serverCards.map((item) => ({\n                    name: item.name,\n                    link: item.link,\n                    _id: item._id,\n                    likes: item.likes,\n                    owner: item.owner,\n                }))\n                setCards(items)\n            })\n            .catch((err) => {\n                console.log(\n                    `Загрузка информации о пользователе и карточек: ${err}`\n                )\n            })\n    }, [])\n\n    // варианты замены текста кнопок при ожидании загрузки\n    const loadingText = 'Сохранение...'\n    const defaultSaveText = 'Сохранить'\n    const defaultCreateText = 'Создать'\n    const defaultYesText = 'Да'\n    // заменит текст кнопок при ожидании процесса загрузки данных на сервер\n    function renderLoading(isLoading, button, text) {\n        if (isLoading) {\n            button.textContent = loadingText\n        } else {\n            button.textContent = text\n        }\n    }\n    function handleCardLike(card) {\n        // проверяем, есть ли уже лайк на этой карточке\n        const isLiked = card.likes.some((i) => i._id === currentUser._id)\n\n        // Отправляем запрос в API и получаем обновлённые данные карточки\n        api.changeLikeCardStatus(card._id, !isLiked)\n            .then((newCard) => {\n                // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n                const newCards = cards.map((c) =>\n                    c._id === card._id ? newCard : c\n                )\n                // Обновляем стейт\n                setCards(newCards)\n            })\n            .catch((err) => {\n                console.log(`Изменения статуса лайка: ${err}`)\n            })\n    }\n\n    function handleCardDeleteSubmit(card, cardDOMElement) {\n        const cardDeleteSubmitButton = document.querySelector(\n            '.popup__save-button_type_card-delete'\n        )\n        // ожидание загрузки\n        renderLoading(true, cardDeleteSubmitButton, defaultYesText)\n        api.deleteItem('cards', card._id)\n            .then(() => {\n                //вызывает удаление карточки из разметки\n                cardDOMElement.remove()\n            })\n            .then(() => {\n                closeAllPopups()\n            })\n            .catch((err) => {\n                console.log(`При удалении карточки: ${err}`)\n            })\n            .finally(() =>\n                renderLoading(false, cardDeleteSubmitButton, defaultYesText)\n            )\n    }\n    // удаляет карточку\n    function handleCardDelete(card, cardDOMElement) {\n        setIsCardDeletePopupOpen(true)\n        setSelectedCard(card)\n        setSelectedCardDOM(cardDOMElement)\n    }\n    // обновляет профиль\n    function handleUpdateUser(userData) {\n        const profileSubmitButton = document.querySelector(\n            '.popup__save-button_type_edit-profile'\n        )\n        // ожидание загрузки\n        renderLoading(true, profileSubmitButton, defaultSaveText)\n\n        api.changeItem(\n            {\n                name: userData.name.trim(),\n                about: userData.about.trim(),\n            },\n            'users/me'\n        )\n            .then((res) => {\n                //установим новые данные профиля в разметке\n                setCurrentUser(res)\n            })\n            .then(() => {\n                closeAllPopups()\n            })\n            .catch((err) => {\n                console.log(`При обновлении информации о пользователе: ${err}`)\n            })\n            .finally(() => {\n                renderLoading(false, profileSubmitButton, defaultSaveText)\n            })\n    }\n\n    function handleUpdateAvatar(userData) {\n        const avatarSubmitButton = document.querySelector(\n            '.popup__save-button_type_edit-avatar'\n        )\n        // до получения ответа от сервера покажет пользователю надпись о процессе загрузки\n        renderLoading(true, avatarSubmitButton, defaultSaveText)\n\n        api.changeItem({ avatar: userData.avatar }, 'users/me/avatar')\n            .then((res) => {\n                //установим новые данные профиля\n                setCurrentUser(res)\n                // установим новый аватар в разметке\n                document.querySelector(\n                    profileAvatarSelector\n                ).style.backgroundImage = `url('${res.avatar}')`\n            })\n            .then(() => {\n                closeAllPopups()\n            })\n            .catch((err) => {\n                console.log(`При изменении аватара пользователя: ${err}`)\n            })\n            .finally(() => {\n                renderLoading(false, avatarSubmitButton, defaultSaveText)\n            })\n    }\n    // добавит новую карточку места\n    function handleAddPlaceSubmit(newCard) {\n        const placeSubmitButton = document.querySelector(\n            '.popup__save-button_type_add-place'\n        )\n        // до получения ответа от сервера покажет пользователю надпись о процессе загрузки\n        renderLoading(true, placeSubmitButton, defaultCreateText)\n\n        api.createItem(newCard, 'cards')\n            // создаст ее в разметке\n            .then((newCard) => {\n                setCards([newCard, ...cards])\n            })\n            .then(() => {\n                closeAllPopups()\n            })\n            .catch((err) => {\n                console.log(`Добавление карточки: ${err}`)\n            })\n            .finally(() => {\n                renderLoading(false, placeSubmitButton, defaultCreateText)\n            })\n    }\n\n    function infoTooltipOpen() {\n        setInfoTooltipOpen(true)\n    }\n\n    function onSignOut() {\n        removeToken()\n        history.push('/sign-in')\n    }\n\n    const handleLogin = (email) => {\n        const userCurrentEmail = {\n            email: email,\n        }\n        setUserEmail(userCurrentEmail)\n        setLoggedIn(true)\n    }\n\n    const tokenCheck = () => {\n        const jwt = getToken()\n\n        if (!jwt) {\n            return\n        }\n\n        auth.getContent(jwt).then((res) => {\n            if (res) {\n                const userCurrentEmail = {\n                    email: res.data.email,\n                }\n                setLoggedIn(true)\n                setUserEmail(userCurrentEmail)\n                history.push('/')\n            }\n        })\n    }\n    // при монтировании компонента будет проверять токен\n    useEffect(() => {\n        tokenCheck()\n    }, [])\n\n    function handleRegisterSuccess() {\n        setRegisterSuccess(true)\n    }\n    function handleRegisterFail() {\n        setRegisterSuccess(false)\n    }\n\n    return (\n        <div className=\"page\">\n            <div className=\"page__container\">\n                <CurrentUserContext.Provider value={currentUser}>\n                    <Header onSignOut={onSignOut} userEmail={userEmail} />\n                    <Switch>\n                        <Route path=\"/sign-in\">\n                            <Login handleLogin={handleLogin} />\n                        </Route>\n                        <Route path=\"/sign-up\">\n                            <Register\n                                handleRegisterSuccess={handleRegisterSuccess}\n                                handleRegisterFail={handleRegisterFail}\n                                infoTooltipOpen={infoTooltipOpen}\n                            />\n                        </Route>\n                        <ProtectedRoute\n                            path=\"/\"\n                            loggedIn={loggedIn}\n                            onEditProfile={handleEditProfileClick}\n                            onAddPlace={handleAddPlaceClick}\n                            onEditAvatar={handleEditAvatarClick}\n                            handleCardClick={handleCardClick}\n                            cards={cards}\n                            onCardLike={handleCardLike}\n                            onCardDelete={handleCardDelete}\n                            component={Main}\n                        />\n                    </Switch>\n\n                    {loggedIn && <Footer />}\n                    <InfoTooltip\n                        isOpen={isInfoTooltipOpen}\n                        onClose={closeAllPopups}\n                        isSuccess={registerSuccess}\n                    />\n                    <EditProfilePopup\n                        isOpen={isEditProfilePopupOpen}\n                        onClose={closeAllPopups}\n                        onUpdateUser={handleUpdateUser}\n                    />\n\n                    <AddPlacePopup\n                        isOpen={isAddPlacePopupOpen}\n                        onClose={closeAllPopups}\n                        onAddPlace={handleAddPlaceSubmit}\n                    />\n\n                    <EditAvatarPopup\n                        isOpen={isEditAvatarPopupOpen}\n                        onClose={closeAllPopups}\n                        onUpdateAvatar={handleUpdateAvatar}\n                    />\n\n                    <PopupWithSubmit\n                        title=\"Вы уверены?\"\n                        name=\"card-delete\"\n                        card={selectedCard}\n                        cardDOM={selectedCardDOM}\n                        buttonText=\"Да\"\n                        isOpen={isCardDeletePopupOpen}\n                        onClose={closeAllPopups}\n                        onCardDeleteSubmit={handleCardDeleteSubmit}\n                    ></PopupWithSubmit>\n\n                    <ImagePopup\n                        name=\"picture-zoom\"\n                        isOpen={isImgPopupOpen}\n                        card={selectedCard}\n                        onClose={closeAllPopups}\n                    />\n                </CurrentUserContext.Provider>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n        <App />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}