{"version":3,"sources":["images/logo.svg","images/success-icon.svg","images/fail-icon.svg","utils/api.js","components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/Footer.js","utils/utils.js","components/FormValidator.js","components/PopupWithForm.js","components/PopupWithSubmit.js","components/ImagePopup.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/RegisterLoginTemplate.js","utils/auth.js","components/Login.js","utils/token.js","components/ProtectedRoute.js","components/Register.js","components/InfoTooltip.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","api","baseUrl","headers","this","res","ok","json","Promise","reject","Error","status","label","fetch","concat","then","_getResponseData","item","method","body","JSON","stringify","title","cardId","notLiked","replaceItem","deleteItem","id","authorization","Header","onSignOut","email","userEmail","className","href","src","logoPath","alt","path","to","onClick","CurrentUserContext","React","createContext","Card","onCardClick","card","onCardLike","onCardDelete","owner","likes","name","link","currentUserData","useContext","isOwn","_id","cardLikeButtonClassName","some","i","evt","placeEvt","target","closest","length","Main","onEditProfile","onAddPlace","onEditAvatar","handleCardClick","cards","style","backgroundImage","avatar","about","map","key","Footer","formSelectorsObj","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorActiveClass","controlSelector","FormValidator","formElement","_formSelectorsObj","_formElement","_inputList","Array","from","querySelectorAll","_buttonElement","querySelector","_inactiveButtonClass","_inputErrorClass","_errorActiveClass","_controlSelector","inputElement","errorMessage","errorElement","_findInputError","textContent","classList","add","remove","inputElementNoSpacing","value","trim","_isInputWithoutSpacingInvalid","validity","valid","_hideInputError","_showInputError","validationMessage","alert","hasInvalidInput","_toggleButtonState","forEach","addEventListener","_checkInputValidity","_setEventListeners","PopupWithForm","buttonText","isOpen","onClose","onSubmit","children","formValidate","currentForm","document","formValidator","enableValidation","closeReset","reset","window","removeEventListener","handleEscClose","event","currentTarget","noValidate","e","preventDefault","autoFocus","type","PopupWithSubmit","cardDOM","onCardDeleteSubmit","ImagePopup","close","EditProfilePopup","onUpdateUser","currentUser","useState","setName","description","setDescription","useEffect","onChange","placeholder","required","minLength","maxLength","EditAvatarPopup","onUpdateAvatar","avatarInput","useRef","setAvatar","current","ref","AddPlacePopup","cardName","setCardName","cardDescription","setCardDescription","RegisterLoginTemplate","BASE_URL","Login","handleLogin","password","data","setData","history","useHistory","message","setMessage","handleChange","prevData","Accept","response","console","log","catch","err","auth","token","localStorage","setItem","setToken","push","ProtectedRoute","Component","component","props","loggedIn","Register","handleRegisterSuccess","handleRegisterFail","infoTooltipOpen","InfoTooltip","isSuccess","success","fail","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isCardDeletePopupOpen","setIsCardDeletePopupOpen","isImgPopupOpen","setIsImgPopupOpen","isInfoTooltipOpen","setInfoTooltipOpen","setCards","setCurrentUser","selectedCard","setSelectedCard","selectedCardDOM","setSelectedCardDOM","setUserEmail","setLoggedIn","registerSuccess","setRegisterSuccess","closeAllPopups","inputErrors","error","cleanInputErrors","renderLoading","isLoading","button","text","all","getItems","values","userData","serverCards","items","tokenCheck","jwt","getItem","Authorization","userCurrentEmail","Provider","removeItem","isLiked","changeLikeCardStatus","newCard","newCards","c","cardDOMElement","profileSubmitButton","changeItem","finally","placeSubmitButton","createItem","avatarSubmitButton","cardDeleteSubmitButton","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.306b1e32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a56cd5e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/success-icon.7fc4c149.svg\";","module.exports = __webpack_public_path__ + \"static/media/fail-icon.c32299fa.svg\";","class Api {\r\n    constructor({ baseUrl, headers }) {\r\n        this.baseUrl = baseUrl\r\n        this.headers = headers\r\n    }\r\n\r\n    _getResponseData(res) {\r\n        if (res.ok) {\r\n            return res.json()\r\n        }\r\n        return Promise.reject(new Error(`Ошибка: ${res.status}`))\r\n    }\r\n    getItems(label) {\r\n        return fetch(this.baseUrl.concat(label), {\r\n            headers: this.headers,\r\n        }).then((res) => {\r\n            return this._getResponseData(res)\r\n        })\r\n    }\r\n\r\n    createItem(item, label) {\r\n        return fetch(this.baseUrl.concat(label), {\r\n            method: 'POST',\r\n            headers: this.headers,\r\n            body: JSON.stringify(item),\r\n        }).then((res) => {\r\n            return this._getResponseData(res)\r\n        })\r\n    }\r\n\r\n    changeItem(item, title) {\r\n        return fetch(this.baseUrl.concat(title), {\r\n            method: 'PATCH',\r\n            headers: this.headers,\r\n            body: JSON.stringify(item),\r\n        }).then((res) => {\r\n            return this._getResponseData(res)\r\n        })\r\n    }\r\n\r\n    changeLikeCardStatus(cardId, notLiked) {\r\n        if (notLiked) {\r\n            return this.replaceItem('cards/likes', cardId)\r\n        } else {\r\n            return this.deleteItem('cards/likes', cardId)\r\n        }\r\n    }\r\n\r\n    replaceItem(title, id) {\r\n        return fetch(this.baseUrl.concat(title).concat(`/${id}`), {\r\n            method: 'PUT',\r\n            headers: this.headers,\r\n            // body: JSON.stringify(item)\r\n        }).then((res) => {\r\n            return this._getResponseData(res)\r\n        })\r\n    }\r\n\r\n    deleteItem(title, id) {\r\n        return fetch(this.baseUrl.concat(title).concat(`/${id}`), {\r\n            method: 'DELETE',\r\n            headers: this.headers,\r\n        }).then((res) => {\r\n            return this._getResponseData(res)\r\n        })\r\n    }\r\n}\r\n\r\nconst token = '3829caf2-6683-412f-9e00-d0870fcd1817'\r\nconst cohort = 'cohort-14'\r\n\r\nconst api = new Api({\r\n    baseUrl: `https://mesto.nomoreparties.co/v1/${cohort}/`,\r\n    headers: {\r\n        authorization: token,\r\n        'Content-Type': 'application/json',\r\n    },\r\n})\r\n\r\nexport default api\r\n\r\n//  - получить список всех карточек в виде массива (GET)\r\n//  - добавить карточку (POST)\r\n//  - удалить карточку (DELETE)\r\n//  - получить данные пользователя (GET)\r\n//  - заменить данные пользователя (PATCH)\r\n//  - заменить аватар (PATCH)\r\n//  - “залайкать” карточку (PUT)\r\n//  - удалить лайк карточки (DELETE)\r\n","import React from 'react'\r\nimport logoPath from '../images/logo.svg'\r\nimport { Route, Switch, Link } from 'react-router-dom'\r\n\r\nfunction Header({ onSignOut, userEmail }) {\r\n    const { email } = userEmail\r\n    return (\r\n        <header className=\"header page__header section\">\r\n            <a href=\"/\" className=\"logo header__logo\">\r\n                <img\r\n                    className=\"logo__image\"\r\n                    src={logoPath}\r\n                    alt=\"Логотип проекта Mesto\"\r\n                />\r\n            </a>\r\n            <Switch>\r\n                <Route path=\"/sign-up\">\r\n                    <Link to=\"./sign-in\" className=\"link header__link\">\r\n                        Вход\r\n                    </Link>\r\n                </Route>\r\n                <Route path=\"/sign-in\">\r\n                    <Link to=\"./sign-up\" className=\"link header__link\">\r\n                        Регистрация\r\n                    </Link>\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <div className=\"header__user-info\">\r\n                        <p className=\"header__email\">{email}</p>\r\n                        <button onClick={onSignOut} className=\"header__button\">\r\n                            Выйти\r\n                        </button>\r\n                    </div>\r\n                </Route>\r\n            </Switch>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nexport const CurrentUserContext = React.createContext()\r\n","import React from 'react'\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\r\n\r\nexport default function Card({\r\n    onCardClick,\r\n    card,\r\n    onCardLike,\r\n    onCardDelete,\r\n    owner,\r\n    likes,\r\n    name,\r\n    link,\r\n}) {\r\n    // будет открывать попап с картинкой\r\n    function handleClick() {\r\n        onCardClick(card)\r\n    }\r\n    function handleLike() {\r\n        onCardLike(card)\r\n    }\r\n    function handleDelete(evt) {\r\n        //сохраняет дом элемент, который надо будет удалить из разметки\r\n        const placeEvt = evt.target.closest('.places__item')\r\n        onCardDelete(card, placeEvt)\r\n    }\r\n    const currentUserData = React.useContext(CurrentUserContext)\r\n\r\n    // Определяем, являемся ли мы владельцем текущей карточки\r\n    const isOwn = owner._id === currentUserData._id\r\n\r\n    // Определяем, есть ли у карточки лайк, поставленный текущим пользователем\r\n    const isLiked = likes.some((i) => i._id === currentUserData._id)\r\n\r\n    // Создаём переменную, которую после зададим в `className` для кнопки лайка\r\n    const cardLikeButtonClassName = isLiked\r\n        ? 'place__like-button place__like-button_active'\r\n        : 'place__like-button'\r\n\r\n    return (\r\n        <li className=\"places__item\">\r\n            <figure className=\"place\">\r\n                {/* проверит, моя ли карточка и отключит кнопку удаления у чужих */}\r\n                <button\r\n                    className={\r\n                        isOwn\r\n                            ? 'link place__delete-button'\r\n                            : 'link place__delete-button place__delete-button_disabled'\r\n                    }\r\n                    onClick={handleDelete}\r\n                />\r\n                <img\r\n                    src={link}\r\n                    alt={name}\r\n                    className=\"place__image\"\r\n                    onClick={handleClick}\r\n                />\r\n                <div className=\"place__wrapper\">\r\n                    <h2 className=\"place__name\">{name} </h2>\r\n                    <button className=\"place__like-button-container\">\r\n                        {/* проверит, залайкана ли мной ранее карточка*/}\r\n                        <div\r\n                            className={cardLikeButtonClassName}\r\n                            onClick={handleLike}\r\n                        ></div>\r\n                        <div className=\"place__like-counter\">\r\n                            {likes.length}\r\n                        </div>\r\n                    </button>\r\n                </div>\r\n            </figure>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Card from './Card'\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\r\n\r\nfunction Main({\r\n    onEditProfile,\r\n    onAddPlace,\r\n    onEditAvatar,\r\n    handleCardClick,\r\n    cards,\r\n    onCardLike,\r\n    onCardDelete,\r\n    ...rest\r\n}) {\r\n    const currentUserData = React.useContext(CurrentUserContext)\r\n\r\n    return (\r\n        <main className=\"content page__content section\">\r\n            <section className=\"profile section\">\r\n                <div\r\n                    className=\"profile__image\"\r\n                    onClick={onEditAvatar}\r\n                    style={{\r\n                        backgroundImage: `url(${currentUserData.avatar})`,\r\n                    }}\r\n                ></div>\r\n                <div className=\"profile__info\">\r\n                    <div className=\"profile__name-wrap\">\r\n                        <h1 className=\"profile__name\">\r\n                            {currentUserData.name}\r\n                        </h1>\r\n                        <button\r\n                            className=\"link profile__edit-button\"\r\n                            onClick={onEditProfile}\r\n                        />\r\n                    </div>\r\n                    <p className=\"profile__job\">{currentUserData.about}</p>\r\n                </div>\r\n                <button\r\n                    className=\"link profile__add-button\"\r\n                    onClick={onAddPlace}\r\n                />\r\n            </section>\r\n            <section className=\"places section\">\r\n                <ul className=\"places__list\">\r\n                    <li className=\"places__empty-list\">Нет добавленных мест</li>\r\n                    {cards.map((card) => (\r\n                        <Card\r\n                            key={card._id}\r\n                            onCardClick={handleCardClick}\r\n                            card={card}\r\n                            onCardLike={onCardLike}\r\n                            onCardDelete={onCardDelete}\r\n                            {...card}\r\n                        />\r\n                    ))}\r\n                </ul>\r\n            </section>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main\r\n\r\n// // для проверки, есть ли в списке картинки, если нет, то делает видимой надпись о пустом списке\r\n// //в placesList всегда есть минимум 1 элемент - надпись о пустом списке\r\n// function check() {\r\n//     const placesList = document.querySelector('.places__list')\r\n//     return (placesList.children.length === 1? \"places__empty-list places__empty-list_visible\" : \"places__empty-list\")\r\n// }\r\n","import React from 'react'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"footer section page__footer\">\r\n            <p className=\"footer__copyright\">&copy; 2020 Mesto Russia</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","// объект настроек с селекторами и классами формы\r\nexport const formSelectorsObj = {\r\n    formSelector: '.popup__form',\r\n    inputSelector: '.popup__input',\r\n    submitButtonSelector: '.popup__save-button',\r\n    inactiveButtonClass: 'popup__save-button_disabled',\r\n    inputErrorClass: '.popup__input-error',\r\n    errorActiveClass: 'popup__input-error_active',\r\n    controlSelector: '.popup__label',\r\n}\r\n","//кейсы проверки валидности\r\nconst VALID = 0\r\nconst INVALID_EMPTY = 1\r\nconst INVALID_TOOSHORT = 2\r\n\r\n//скрывает уведомления об ошибках в инпутах (используется на открытом попапе в index.js)\r\nexport function cleanInputErrors() {\r\n    const inputErrors = document.querySelectorAll('.popup__input-error')\r\n\r\n    if (inputErrors) {\r\n        inputErrors.forEach((error) =>\r\n            error.classList.remove('popup__input-error_active')\r\n        )\r\n    }\r\n}\r\n\r\nexport class FormValidator {\r\n    constructor(formSelectorsObj, formElement) {\r\n        this._formSelectorsObj = formSelectorsObj\r\n        this._formElement = formElement\r\n        this._inputList = Array.from(\r\n            formElement.querySelectorAll(formSelectorsObj.inputSelector)\r\n        )\r\n        this._buttonElement = formElement.querySelector(\r\n            formSelectorsObj.submitButtonSelector\r\n        )\r\n        this._inactiveButtonClass = formSelectorsObj.inactiveButtonClass\r\n        this._inputErrorClass = formSelectorsObj.inputErrorClass\r\n        this._errorActiveClass = formSelectorsObj.errorActiveClass\r\n        this._controlSelector = formSelectorsObj.controlSelector\r\n    }\r\n\r\n    // находит элемент ошибки в ближайшем к текущему инпуту лэйбле\r\n    _findInputError(inputElement) {\r\n        return inputElement\r\n            .closest(this._controlSelector)\r\n            .querySelector(this._inputErrorClass)\r\n    }\r\n\r\n    //показывает сообщение об ошибке\r\n    _showInputError(inputElement, errorMessage) {\r\n        const errorElement = this._findInputError(inputElement)\r\n        errorElement.textContent = errorMessage\r\n        errorElement.classList.add(this._errorActiveClass)\r\n    }\r\n\r\n    //скрывает сообщение об ошибке\r\n    _hideInputError(inputElement) {\r\n        const errorElement = this._findInputError(inputElement)\r\n        errorElement.classList.remove(this._errorActiveClass)\r\n        errorElement.textContent = ''\r\n    }\r\n\r\n    //проверяет длину инпутов, очищенных от пробелов\r\n    _isInputWithoutSpacingInvalid(inputElement) {\r\n        const inputElementNoSpacing = inputElement.value.trim()\r\n\r\n        if (inputElementNoSpacing.length === 0) {\r\n            return INVALID_EMPTY\r\n        }\r\n        //если введено меньше 2 символов\r\n        if (inputElementNoSpacing.length < 2) {\r\n            return INVALID_TOOSHORT\r\n        }\r\n        return VALID\r\n    }\r\n\r\n    //проверяет валидность инпутов с учетом пробелов и выводит на стр соответствующие ошибки\r\n    _checkInputValidity(inputElement) {\r\n        const errorElement = this._findInputError(inputElement)\r\n\r\n        switch (this._isInputWithoutSpacingInvalid(inputElement)) {\r\n            //если поле пусто, не считая пробелы\r\n            case INVALID_EMPTY:\r\n                errorElement.textContent = 'Заполните это поле.'\r\n                errorElement.classList.add(this._errorActiveClass)\r\n                break\r\n            //если выбросить пробелы и в поле 1 символ\r\n            case INVALID_TOOSHORT:\r\n                errorElement.textContent =\r\n                    'Текст должен быть не короче 2 симв. Длина текста сейчас: 1 символ.'\r\n                errorElement.classList.add(this._errorActiveClass)\r\n                break\r\n            //если без пробелов в поле 2 символа, то проверим их валидность\r\n            case VALID:\r\n                if (!inputElement.validity.valid) {\r\n                    this._showInputError(\r\n                        inputElement,\r\n                        inputElement.validationMessage\r\n                    )\r\n                } else {\r\n                    this._hideInputError(inputElement)\r\n                }\r\n                break\r\n\r\n            default:\r\n                alert('error')\r\n        }\r\n    }\r\n\r\n    //вернет true, если есть невалидный инпут (с учетом проверки пробелов)\r\n    hasInvalidInput() {\r\n        return this._inputList.some((inputElement) => {\r\n            return (\r\n                !inputElement.validity.valid ||\r\n                this._isInputWithoutSpacingInvalid(inputElement)\r\n            )\r\n        })\r\n    }\r\n\r\n    //(раз)блокирует кнопку submit, если есть невалидные инпуты\r\n    _toggleButtonState() {\r\n        if (this.hasInvalidInput()) {\r\n            this._buttonElement.classList.add(this._inactiveButtonClass)\r\n        } else {\r\n            this._buttonElement.classList.remove(this._inactiveButtonClass)\r\n        }\r\n    }\r\n\r\n    _setEventListeners() {\r\n        //устанавливает состояние кнопки submit еще до изменения инпутов\r\n        this._toggleButtonState()\r\n        //прослушки для инпутов\r\n        this._inputList.forEach((inputElement) => {\r\n            inputElement.addEventListener('input', () => {\r\n                this._checkInputValidity(inputElement)\r\n                this._toggleButtonState()\r\n            })\r\n        })\r\n    }\r\n    enableValidation() {\r\n        this._setEventListeners()\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { formSelectorsObj } from '../utils/utils'\r\nimport { FormValidator } from './FormValidator'\r\n\r\nfunction PopupWithForm({\r\n    title,\r\n    name,\r\n    buttonText,\r\n    isOpen,\r\n    onClose,\r\n    onSubmit,\r\n    children,\r\n}) {\r\n    function formValidate() {\r\n        if (isOpen) {\r\n            const currentForm = document.querySelector(\r\n                `.popup__form_type_${name}`\r\n            )\r\n            // будет валидировать форму\r\n            const formValidator = new FormValidator(\r\n                formSelectorsObj,\r\n                currentForm\r\n            )\r\n            formValidator.enableValidation()\r\n            return !formValidator.hasInvalidInput()\r\n        }\r\n    }\r\n    formValidate()\r\n\r\n    // очистит форму от введенного в инпут текста, ошибок валидации и закроет попап\r\n    function closeReset() {\r\n        document.querySelector(`.popup__form_type_${name}`).reset()\r\n        onClose()\r\n        window.removeEventListener('keydown', handleEscClose)\r\n    }\r\n    //закрывает при нажатии esc\r\n    function handleEscClose(evt) {\r\n        if (evt.key === 'Escape') {\r\n            closeReset()\r\n        }\r\n    }\r\n    //закрывает попап при нажатии на фон\r\n    function closePopupByClickingOverlay(event) {\r\n        if (event.target === event.currentTarget) {\r\n            closeReset()\r\n        }\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n        if (formValidate()) {\r\n            onSubmit(e)\r\n            document.querySelector(`.popup__form_type_${name}`).reset()\r\n        }\r\n    }\r\n    // проверяет нажатие esc\r\n    if (isOpen) {\r\n        window.addEventListener('keydown', (evt) => handleEscClose(evt))\r\n    }\r\n\r\n    return (\r\n        <section\r\n            className={`popup popup_type_form popup_type_${name} ${\r\n                isOpen && 'popup_opened'\r\n            }`}\r\n            onClick={closePopupByClickingOverlay}\r\n        >\r\n            <div className=\"popup__container\">\r\n                <button\r\n                    className=\"link popup__close-button\"\r\n                    onClick={closeReset}\r\n                />\r\n                <form\r\n                    className={`popup__form popup__form_type_${name}`}\r\n                    noValidate\r\n                    name={name}\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                    <h2 className=\"popup__title\">{title}</h2>\r\n                    <fieldset className=\"popup__fieldset\">\r\n                        {children}\r\n                        <button\r\n                            className={`link popup__save-button popup__save-button_type_${name}`}\r\n                            autoFocus\r\n                            type=\"submit\"\r\n                        >\r\n                            {buttonText}\r\n                        </button>\r\n                    </fieldset>\r\n                </form>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default PopupWithForm\r\n","import React from 'react'\r\nimport PopupWithForm from './PopupWithForm'\r\n\r\nfunction PopupWithSubmit({\r\n    title,\r\n    name,\r\n    card,\r\n    cardDOM,\r\n    buttonText,\r\n    isOpen,\r\n    onClose,\r\n    onCardDeleteSubmit,\r\n}) {\r\n    function handleSubmit(e) {\r\n        // Запрещаем браузеру переходить по адресу формы\r\n        e.preventDefault()\r\n        onCardDeleteSubmit(card, cardDOM)\r\n    }\r\n    return (\r\n        <PopupWithForm\r\n            title={title}\r\n            name={name}\r\n            buttonText={buttonText}\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n            onSubmit={handleSubmit}\r\n        ></PopupWithForm>\r\n    )\r\n}\r\n\r\nexport default PopupWithSubmit\r\n","import React from 'react'\r\n\r\nfunction ImagePopup({ card, onClose, isOpen, name }) {\r\n    function close() {\r\n        onClose()\r\n        window.removeEventListener('keydown', handleEscClose)\r\n    }\r\n    //закрывает при нажатии esc\r\n    function handleEscClose(evt) {\r\n        if (evt.key === 'Escape') {\r\n            close()\r\n        }\r\n    }\r\n    //закрывает попап при нажатии на фон\r\n    function closePopupByClickingOverlay(event) {\r\n        if (event.target === event.currentTarget) {\r\n            close()\r\n        }\r\n    }\r\n\r\n    if (card) {\r\n        window.addEventListener('keydown', handleEscClose)\r\n\r\n        return (\r\n            <section\r\n                className={`popup popup_type_${name} ${\r\n                    isOpen && 'popup_opened'\r\n                }`}\r\n                onClick={closePopupByClickingOverlay}\r\n            >\r\n                <div className=\"popup__container-pic-zoom\">\r\n                    <button\r\n                        className=\"link popup__close-button\"\r\n                        onClick={close}\r\n                    />\r\n                    <figure className=\"picture-zoom\">\r\n                        <img\r\n                            src={card.link}\r\n                            alt={card.name}\r\n                            className=\"picture-zoom__img\"\r\n                        />\r\n                        <p className=\"picture-zoom__title\">{card.name}</p>\r\n                    </figure>\r\n                </div>\r\n            </section>\r\n        )\r\n    } else return ''\r\n}\r\n\r\nexport default ImagePopup\r\n","import React, { useState, useEffect } from 'react'\r\nimport PopupWithForm from './PopupWithForm'\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\r\n\r\nfunction EditProfilePopup({ isOpen, onClose, onUpdateUser }) {\r\n    const currentUser = React.useContext(CurrentUserContext)\r\n\r\n    // для заполнения инпутов текущими данными пользователя\r\n    const [name, setName] = useState('')\r\n    const [description, setDescription] = useState('')\r\n\r\n    // После загрузки текущего пользователя из API\r\n    // его данные будут использованы в управляемых компонентах.\r\n    useEffect(() => {\r\n        setName(currentUser.name)\r\n        setDescription(currentUser.about)\r\n    }, [currentUser])\r\n    // при введении текста в инпут будет обновлять стейт\r\n    function handleNameChange(e) {\r\n        setName(e.target.value)\r\n    }\r\n    function handleDescribChange(e) {\r\n        setDescription(e.target.value)\r\n    }\r\n\r\n    function handleClose() {\r\n        // если изменены инпуты, но не засабмичены, то не станет сохранять их values ????????????????????????\r\n        setName(currentUser.name)\r\n        setDescription(currentUser.about)\r\n\r\n        onClose()\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        // Запрещаем браузеру переходить по адресу формы\r\n        e.preventDefault()\r\n\r\n        // Передаём значения управляемых компонентов во внешний обработчик\r\n        onUpdateUser({\r\n            name,\r\n            about: description,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <PopupWithForm\r\n            title=\"Редактировать профиль\"\r\n            name=\"edit-profile\"\r\n            buttonText=\"Сохранить\"\r\n            isOpen={isOpen}\r\n            onClose={handleClose}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <label className=\"popup__label\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={name}\r\n                    onChange={handleNameChange}\r\n                    name=\"profile-name\"\r\n                    placeholder=\"Имя\"\r\n                    id=\"profile-name\"\r\n                    className=\"input popup__input popup__input_type_name\"\r\n                    required\r\n                    minLength=\"2\"\r\n                    maxLength=\"40\"\r\n                />\r\n                <span className=\"popup__input-error js-popup__input-error_type_profile\"></span>\r\n            </label>\r\n            <label className=\"popup__label\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={description}\r\n                    onChange={handleDescribChange}\r\n                    name=\"profile-job\"\r\n                    id=\"profile-job\"\r\n                    placeholder=\"Род деятельности\"\r\n                    className=\"input popup__input popup__input_type_job\"\r\n                    required\r\n                    minLength=\"2\"\r\n                    maxLength=\"200\"\r\n                />\r\n                <span className=\"popup__input-error js-popup__input-error_type_profile\"></span>\r\n            </label>\r\n        </PopupWithForm>\r\n    )\r\n}\r\n\r\nexport default EditProfilePopup\r\n","import React, { useState, useRef } from 'react'\r\nimport PopupWithForm from './PopupWithForm'\r\n\r\nfunction EditAvatarPopup({ isOpen, onClose, onUpdateAvatar }) {\r\n    const avatarInput = useRef({})\r\n    const [avatar, setAvatar] = useState('')\r\n\r\n    function handleChange(e) {\r\n        setAvatar(e.target.value)\r\n    }\r\n    function handleSubmit(e) {\r\n        onUpdateAvatar({\r\n            avatar: avatarInput.current.value,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <PopupWithForm\r\n            title=\"Обновить аватар\"\r\n            name=\"edit-avatar\"\r\n            buttonText=\"Сохранить\"\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <label className=\"popup__label\">\r\n                <input\r\n                    ref={avatarInput}\r\n                    onChange={handleChange}\r\n                    type=\"url\"\r\n                    name=\"avatar\"\r\n                    id=\"avatar\"\r\n                    placeholder=\"Ссылка на картинку\"\r\n                    className=\"input popup__input popup__input_type_avatar\"\r\n                    required\r\n                />\r\n                <span className=\"popup__input-error\"></span>\r\n            </label>\r\n        </PopupWithForm>\r\n    )\r\n}\r\n\r\nexport default EditAvatarPopup\r\n","import React, { useState } from 'react'\r\nimport PopupWithForm from './PopupWithForm'\r\n\r\nfunction AddPlacePopup({ isOpen, onClose, onAddPlace }) {\r\n    const [cardName, setCardName] = useState('')\r\n    const [cardDescription, setCardDescription] = useState('')\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        onAddPlace({\r\n            name: cardName,\r\n            link: cardDescription,\r\n        })\r\n        setCardName('')\r\n        setCardDescription('')\r\n    }\r\n\r\n    function handleNameChange(e) {\r\n        setCardName(e.target.value)\r\n    }\r\n    function handleDescibChange(e) {\r\n        setCardDescription(e.target.value)\r\n    }\r\n    function close() {\r\n        setCardName('')\r\n        setCardDescription('')\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <PopupWithForm\r\n            title=\"Новое место\"\r\n            name=\"add-place\"\r\n            buttonText=\"Создать\"\r\n            isOpen={isOpen}\r\n            onClose={close}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <label className=\"popup__label\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={cardName}\r\n                    onChange={handleNameChange}\r\n                    name=\"place-name\"\r\n                    placeholder=\"Название\"\r\n                    id=\"place-name\"\r\n                    className=\"input popup__input popup__input_type_place-name\"\r\n                    required\r\n                    minLength=\"2\"\r\n                    maxLength=\"30\"\r\n                />\r\n                <span className=\"popup__input-error\"></span>\r\n            </label>\r\n            <label className=\"popup__label\">\r\n                <input\r\n                    type=\"url\"\r\n                    value={cardDescription}\r\n                    onChange={handleDescibChange}\r\n                    name=\"place-pic\"\r\n                    id=\"place-pic\"\r\n                    placeholder=\"Ссылка на картинку\"\r\n                    className=\"input popup__input popup__input_type_place-pic\"\r\n                    required\r\n                />\r\n                <span className=\"popup__input-error\"></span>\r\n            </label>\r\n        </PopupWithForm>\r\n    )\r\n}\r\n\r\nexport default AddPlacePopup\r\n","import React from 'react'\r\n\r\nfunction RegisterLoginTemplate({ title, children, onSubmit }) {\r\n    return (\r\n        <>\r\n            <section className=\"popup__register-login\">\r\n                <section className=\"popup__container-register-login\">\r\n                    <form\r\n                        className=\"popup__form\"\r\n                        noValidate\r\n                        onSubmit={onSubmit}\r\n                    >\r\n                        <h2 className=\"popup__title popup__title_type_login\">\r\n                            {title}\r\n                        </h2>\r\n                        <fieldset className=\"popup__fieldset\">\r\n                            {children}\r\n                        </fieldset>\r\n                    </form>\r\n                </section>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RegisterLoginTemplate\r\n","export const BASE_URL = 'https://auth.nomoreparties.co'\r\n\r\nexport const register = (email, password) => {\r\n    return fetch(`${BASE_URL}/signup`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n    })\r\n        .then((response) => {\r\n            try {\r\n                if (response.status === 201) {\r\n                    return response.json()\r\n                }\r\n            } catch (e) {\r\n                return e\r\n            }\r\n        })\r\n        .then((res) => {\r\n            return res\r\n        })\r\n        .catch((err) => console.log(`auth register error: ${err}`))\r\n}\r\n\r\nexport const authorize = (email, password) => {\r\n\r\n    return fetch(`${BASE_URL}/signin`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n    })\r\n        .then((response) => response.json()\r\n        )\r\n        .then((data) => {\r\n          if (!data) {\r\n            console.log(`auth пользователь с email не найден : ${data}`)\r\n          }\r\n\r\n            if (data) {\r\n\r\n                return data\r\n            } else {\r\n                return\r\n            }\r\n        })\r\n        .catch((err) => console.log(`auth authorize error: ${err}`))\r\n}\r\n\r\nexport const getContent = (token) => {\r\n    return fetch(`${BASE_URL}/users/me`, {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    }).then((res) => res.json())\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport RegisterLoginTemplate from './RegisterLoginTemplate'\r\nimport * as auth from '../utils/auth.js'\r\nimport { setToken } from '../utils/token'\r\n\r\nconst Login = ({ handleLogin }) => {\r\n    const [data, setData] = useState({\r\n        email: '',\r\n        password: '',\r\n    })\r\n    const history = useHistory()\r\n    const [message, setMessage] = useState('')\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            [name]: value,\r\n        }))\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const { email, password } = data\r\n\r\n        if (!email || !password) {\r\n            return\r\n        }\r\n\r\n        auth.authorize(email, password)\r\n            .then((data) => {\r\n                if (!data) {\r\n                    setMessage('Что-то пошло не так при авторизации в Login!')\r\n                }\r\n                if (data.token) {\r\n                    setToken(data.token)\r\n                    setMessage('')\r\n                    handleLogin(email)\r\n                    history.push('/')\r\n                }\r\n            })\r\n            .then(() => setData({ email: '', password: '' }))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <RegisterLoginTemplate title=\"Вход\" onSubmit={handleSubmit}>\r\n                <label className=\"popup__label\">\r\n                    <input\r\n                        type=\"email\"\r\n                        value={data.email}\r\n                        onChange={handleChange}\r\n                        name=\"email\"\r\n                        placeholder=\"Email\"\r\n                        id=\"email\"\r\n                        className=\"input popup__input popup__input_type_dark\"\r\n                        required\r\n                        minLength=\"2\"\r\n                        maxLength=\"320\"\r\n                    />\r\n                    <span className=\"popup__input-error\">{message}</span>\r\n                </label>\r\n                <label className=\"popup__label\">\r\n                    <input\r\n                        type=\"password\"\r\n                        value={data.password}\r\n                        onChange={handleChange}\r\n                        name=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"Пароль\"\r\n                        className=\"input popup__input popup__input_type_dark\"\r\n                        required\r\n                        minLength=\"2\"\r\n                        maxLength=\"200\"\r\n                    />\r\n                    <span className=\"popup__input-error\">{message}</span>\r\n                </label>\r\n                <button\r\n                    className=\"link popup__save-button popup__save-button_type_dark\"\r\n                    autoFocus\r\n                    type=\"submit\"\r\n                >\r\n                    Войти\r\n                </button>\r\n            </RegisterLoginTemplate>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","const TOKEN_KEY = 'jwt'\r\n\r\nexport const setToken = (token) => {\r\n    localStorage.setItem(TOKEN_KEY, token)\r\n}\r\n\r\nexport const getToken = () => localStorage.getItem(TOKEN_KEY)\r\n\r\nexport const removeToken = () => {\r\n    localStorage.removeItem(TOKEN_KEY)\r\n}\r\n","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nconst ProtectedRoute = ({ component: Component, ...props }) => {\r\n    return (\r\n        <Route>\r\n            {() =>\r\n                props.loggedIn === true ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    // <Redirect to=\"./sign-in?redirect=/\" />\r\n                    <Redirect to=\"./sign-up\" />\r\n                )\r\n            }\r\n        </Route>\r\n    )\r\n}\r\n\r\nexport default ProtectedRoute\r\n","import React, { useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport RegisterLoginTemplate from './RegisterLoginTemplate'\r\nimport * as auth from '../utils/auth.js'\r\nimport { formSelectorsObj } from '../utils/utils'\r\nimport { FormValidator } from './FormValidator'\r\n\r\nconst Register = ({\r\n    handleRegisterSuccess,\r\n    handleRegisterFail,\r\n    infoTooltipOpen,\r\n}) => {\r\n    const [data, setData] = useState({\r\n        email: '',\r\n        password: '',\r\n    })\r\n    const history = useHistory()\r\n    const [message, setMessage] = useState('')\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            [name]: value,\r\n        }))\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const { email, password } = data\r\n\r\n        auth.register(email, password).then((res) => {\r\n            if (res) {\r\n                if (res.data) {\r\n                    setMessage('')\r\n                    handleRegisterSuccess()\r\n                    infoTooltipOpen()\r\n                    history.push('/sign-in')\r\n                } else if (res.status === 400) {\r\n                    setMessage('Неверно введены данные в Register')\r\n                    handleRegisterFail()\r\n                    infoTooltipOpen()\r\n                }\r\n            } else {\r\n                setMessage('Ошибка при регистрации в Register')\r\n                handleRegisterFail()\r\n                infoTooltipOpen()\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"register\">\r\n            <RegisterLoginTemplate\r\n                // name=\"login\"\r\n                title=\"Регистрация\"\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <label className=\"popup__label\">\r\n                    <input\r\n                        type=\"email\"\r\n                        value={data.email}\r\n                        onChange={handleChange}\r\n                        name=\"email\"\r\n                        placeholder=\"Email\"\r\n                        id=\"email\"\r\n                        className=\"input popup__input popup__input_type_dark\"\r\n                        required\r\n                        minLength=\"2\"\r\n                        maxLength=\"320\"\r\n                    />\r\n                    <span className=\"popup__input-error popup__input-error_active\">\r\n                        {message}\r\n                    </span>\r\n                </label>\r\n                <label className=\"popup__label\">\r\n                    <input\r\n                        type=\"password\"\r\n                        value={data.password}\r\n                        onChange={handleChange}\r\n                        name=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"Пароль\"\r\n                        className=\"input popup__input popup__input_type_dark\"\r\n                        required\r\n                        minLength=\"2\"\r\n                        maxLength=\"200\"\r\n                    />\r\n                    <span className=\"popup__input-error popup__input-error_active\">\r\n                        {message}\r\n                    </span>\r\n                </label>\r\n                <button\r\n                    className=\"link popup__save-button popup__save-button_type_dark\"\r\n                    autoFocus\r\n                    type=\"submit\"\r\n                >\r\n                    Зарегистрироваться\r\n                </button>\r\n                <Link to=\"/sign-in\" className=\"link popup__login-link\">\r\n                    Уже зарегистрированны? Войти\r\n                </Link>\r\n            </RegisterLoginTemplate>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register\r\n","import React from 'react'\r\nimport success from '../images/success-icon.svg'\r\nimport fail from '../images/fail-icon.svg'\r\n\r\nfunction InfoTooltip({ isOpen, onClose, isSuccess }) {\r\n    // проверяет нажатие esc\r\n    if (isOpen) {\r\n        window.addEventListener('keydown', (evt) => handleEscClose(evt))\r\n    }\r\n    function closeReset() {\r\n        onClose()\r\n        window.removeEventListener('keydown', handleEscClose)\r\n    }\r\n    //закрывает при нажатии esc\r\n    function handleEscClose(evt) {\r\n        if (evt.key === 'Escape') {\r\n            closeReset()\r\n        }\r\n    }\r\n    //закрывает попап при нажатии на фон\r\n    function closePopupByClickingOverlay(event) {\r\n        if (event.target === event.currentTarget) {\r\n            closeReset()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section\r\n                className={`popup popup_type_form ${isOpen && 'popup_opened'}`}\r\n                onClick={closePopupByClickingOverlay}\r\n            >\r\n                <div className=\"popup__container\">\r\n                    {isSuccess ? (\r\n                        <>\r\n                            <img\r\n                                src={success}\r\n                                alt=\"Галочка\"\r\n                                className=\"popup__infotool-img\"\r\n                            />\r\n                            <p className=\"popup__infotool-text\">\r\n                                Вы успешно зарегистрировались!\r\n                            </p>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <img\r\n                                src={fail}\r\n                                alt=\"Красный крестик\"\r\n                                className=\"popup__infotool-img\"\r\n                            />\r\n                            <p className=\"popup__infotool-text\">\r\n                                Что-то пошло не так. Попробуйте ещё раз!\r\n                            </p>\r\n                        </>\r\n                    )}\r\n                    <button\r\n                        className=\"popup__close-button\"\r\n                        onClick={onClose}\r\n                    ></button>\r\n                </div>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InfoTooltip\r\n","import React, { useEffect, useState } from 'react'\r\nimport api from '../utils/api'\r\nimport Header from './Header'\r\nimport Main from './Main'\r\nimport Footer from './Footer'\r\nimport PopupWithSubmit from './PopupWithSubmit'\r\nimport ImagePopup from './ImagePopup'\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\r\nimport EditProfilePopup from './EditProfilePopup'\r\nimport EditAvatarPopup from './EditAvatarPopup'\r\nimport AddPlacePopup from './AddPlacePopup'\r\nimport { cleanInputErrors } from './FormValidator'\r\nimport { Route, Switch, useHistory } from 'react-router-dom'\r\nimport Login from './Login'\r\nimport ProtectedRoute from './ProtectedRoute'\r\nimport Register from './Register'\r\nimport InfoTooltip from './InfoTooltip'\r\nimport * as auth from '../utils/auth.js'\r\nimport { getToken, removeToken } from '../utils/token'\r\n\r\nfunction App() {\r\n    //состояние попапов\r\n    const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false)\r\n    const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false)\r\n    const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false)\r\n    const [isCardDeletePopupOpen, setIsCardDeletePopupOpen] = useState(false)\r\n    const [isImgPopupOpen, setIsImgPopupOpen] = useState(false)\r\n    const [isInfoTooltipOpen, setInfoTooltipOpen] = useState(false)\r\n\r\n    const [cards, setCards] = useState([])\r\n\r\n    const profileAvatarSelector = '.profile__image'\r\n    // Данные текущего пользователя будут использованы как контекст (пока не пришли даннные с сервера покажет Жака)\r\n    const [currentUser, setCurrentUser] = useState({\r\n        name: 'Жак Ив Кусто',\r\n        about: 'Мореплаватель',\r\n        avatar:\r\n            'https://kaskad.tv/images/2020/foto_zhak_iv_kusto__-_interesnie_fakti_20190810_2078596433.jpg',\r\n    })\r\n    // для попапа с полноразмерной картинкой\r\n    const [selectedCard, setSelectedCard] = useState()\r\n    // для удаления карточки\r\n    const [selectedCardDOM, setSelectedCardDOM] = useState()\r\n\r\n    const [userEmail, setUserEmail] = useState({ email: '' })\r\n    const [loggedIn, setLoggedIn] = useState(false)\r\n    const history = useHistory()\r\n    const [registerSuccess, setRegisterSuccess] = useState(false)\r\n\r\n    // открывают попапы\r\n    function handleEditAvatarClick() {\r\n        setIsEditAvatarPopupOpen(true)\r\n    }\r\n    function handleEditProfileClick() {\r\n        setIsEditProfilePopupOpen(true)\r\n    }\r\n    function handleAddPlaceClick() {\r\n        setIsAddPlacePopupOpen(true)\r\n    }\r\n\r\n    //для открытия попапа с увеличенной картинкой\r\n    function handleCardClick(card) {\r\n        setSelectedCard(card)\r\n        setIsImgPopupOpen(true)\r\n    }\r\n\r\n    // закрывает все попапы меняя их состояние\r\n    function closeAllPopups() {\r\n        //убирает уведомления об ошибках от предыдущих инпутов\r\n        cleanInputErrors()\r\n\r\n        setIsEditAvatarPopupOpen(false)\r\n        setIsEditProfilePopupOpen(false)\r\n        setIsAddPlacePopupOpen(false)\r\n        setSelectedCard()\r\n        setIsCardDeletePopupOpen(false)\r\n        setIsImgPopupOpen(false)\r\n        setSelectedCardDOM()\r\n        setInfoTooltipOpen(false)\r\n    }\r\n\r\n    // при монтировании компонента будет совершать запрос в API за пользовательскими данными и карточками\r\n    useEffect(() => {\r\n        Promise.all([api.getItems('users/me'), api.getItems('cards')])\r\n            .then((values) => {\r\n                const [userData, serverCards] = values\r\n                // отображает данные пользователья в профиле\r\n                setCurrentUser(userData)\r\n\r\n                // отобразит карточки с сервера\r\n                const items = serverCards.map((item) => ({\r\n                    name: item.name,\r\n                    link: item.link,\r\n                    _id: item._id,\r\n                    likes: item.likes,\r\n                    owner: item.owner,\r\n                }))\r\n                setCards(items)\r\n            })\r\n            .catch((err) => {\r\n                console.log(\r\n                    `Загрузка информации о пользователе и карточек: ${err}`\r\n                )\r\n            })\r\n    }, [])\r\n\r\n    // варианты замены текста кнопок при ожидании загрузки\r\n    const loadingText = 'Сохранение...'\r\n    const defaultSaveText = 'Сохранить'\r\n    const defaultCreateText = 'Создать'\r\n    const defaultYesText = 'Да'\r\n    // заменит текст кнопок при ожидании процесса загрузки данных на сервер\r\n    function renderLoading(isLoading, button, text) {\r\n        if (isLoading) {\r\n            button.textContent = loadingText\r\n        } else {\r\n            button.textContent = text\r\n        }\r\n    }\r\n    function handleCardLike(card) {\r\n        // проверяем, есть ли уже лайк на этой карточке\r\n        const isLiked = card.likes.some((i) => i._id === currentUser._id)\r\n\r\n        // Отправляем запрос в API и получаем обновлённые данные карточки\r\n        api.changeLikeCardStatus(card._id, !isLiked)\r\n            .then((newCard) => {\r\n                // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\r\n                const newCards = cards.map((c) =>\r\n                    c._id === card._id ? newCard : c\r\n                )\r\n                // Обновляем стейт\r\n                setCards(newCards)\r\n            })\r\n            .catch((err) => {\r\n                console.log(`Изменения статуса лайка: ${err}`)\r\n            })\r\n    }\r\n\r\n    function handleCardDeleteSubmit(card, cardDOMElement) {\r\n        const cardDeleteSubmitButton = document.querySelector(\r\n            '.popup__save-button_type_card-delete'\r\n        )\r\n        // ожидание загрузки\r\n        renderLoading(true, cardDeleteSubmitButton, defaultYesText)\r\n        api.deleteItem('cards', card._id)\r\n            .then(() => {\r\n                //вызывает удаление карточки из разметки\r\n                cardDOMElement.remove()\r\n            })\r\n            .then(() => {\r\n                closeAllPopups()\r\n            })\r\n            .catch((err) => {\r\n                console.log(`При удалении карточки: ${err}`)\r\n            })\r\n            .finally(() =>\r\n                renderLoading(false, cardDeleteSubmitButton, defaultYesText)\r\n            )\r\n    }\r\n    // удаляет карточку\r\n    function handleCardDelete(card, cardDOMElement) {\r\n        setIsCardDeletePopupOpen(true)\r\n        setSelectedCard(card)\r\n        setSelectedCardDOM(cardDOMElement)\r\n    }\r\n    // обновляет профиль\r\n    function handleUpdateUser(userData) {\r\n        const profileSubmitButton = document.querySelector(\r\n            '.popup__save-button_type_edit-profile'\r\n        )\r\n        // ожидание загрузки\r\n        renderLoading(true, profileSubmitButton, defaultSaveText)\r\n\r\n        api.changeItem(\r\n            {\r\n                name: userData.name.trim(),\r\n                about: userData.about.trim(),\r\n            },\r\n            'users/me'\r\n        )\r\n            .then((res) => {\r\n                //установим новые данные профиля в разметке\r\n                setCurrentUser(res)\r\n            })\r\n            .then(() => {\r\n                closeAllPopups()\r\n            })\r\n            .catch((err) => {\r\n                console.log(`При обновлении информации о пользователе: ${err}`)\r\n            })\r\n            .finally(() => {\r\n                renderLoading(false, profileSubmitButton, defaultSaveText)\r\n            })\r\n    }\r\n\r\n    function handleUpdateAvatar(userData) {\r\n        const avatarSubmitButton = document.querySelector(\r\n            '.popup__save-button_type_edit-avatar'\r\n        )\r\n        // до получения ответа от сервера покажет пользователю надпись о процессе загрузки\r\n        renderLoading(true, avatarSubmitButton, defaultSaveText)\r\n\r\n        api.changeItem({ avatar: userData.avatar }, 'users/me/avatar')\r\n            .then((res) => {\r\n                //установим новые данные профиля\r\n                setCurrentUser(res)\r\n                // установим новый аватар в разметке\r\n                document.querySelector(\r\n                    profileAvatarSelector\r\n                ).style.backgroundImage = `url('${res.avatar}')`\r\n            })\r\n            .then(() => {\r\n                closeAllPopups()\r\n            })\r\n            .catch((err) => {\r\n                console.log(`При изменении аватара пользователя: ${err}`)\r\n            })\r\n            .finally(() => {\r\n                renderLoading(false, avatarSubmitButton, defaultSaveText)\r\n            })\r\n    }\r\n    // добавит новую карточку места\r\n    function handleAddPlaceSubmit(newCard) {\r\n        const placeSubmitButton = document.querySelector(\r\n            '.popup__save-button_type_add-place'\r\n        )\r\n        // до получения ответа от сервера покажет пользователю надпись о процессе загрузки\r\n        renderLoading(true, placeSubmitButton, defaultCreateText)\r\n\r\n        api.createItem(newCard, 'cards')\r\n            // создаст ее в разметке\r\n            .then((newCard) => {\r\n                setCards([newCard, ...cards])\r\n            })\r\n            .then(() => {\r\n                closeAllPopups()\r\n            })\r\n            .catch((err) => {\r\n                console.log(`Добавление карточки: ${err}`)\r\n            })\r\n            .finally(() => {\r\n                renderLoading(false, placeSubmitButton, defaultCreateText)\r\n            })\r\n    }\r\n\r\n    function infoTooltipOpen() {\r\n        setInfoTooltipOpen(true)\r\n    }\r\n\r\n    function onSignOut() {\r\n        removeToken()\r\n        history.push('/sign-in')\r\n    }\r\n\r\n    const handleLogin = (email) => {\r\n        const userCurrentEmail = {\r\n            email: email,\r\n        }\r\n        setUserEmail(userCurrentEmail)\r\n        setLoggedIn(true)\r\n    }\r\n\r\n    const tokenCheck = () => {\r\n        const jwt = getToken()\r\n\r\n        if (!jwt) {\r\n            return\r\n        }\r\n\r\n        auth.getContent(jwt).then((res) => {\r\n            if (res) {\r\n                const userCurrentEmail = {\r\n                    email: res.data.email,\r\n                }\r\n                setLoggedIn(true)\r\n                setUserEmail(userCurrentEmail)\r\n                history.push('/')\r\n            }\r\n        })\r\n    }\r\n    // при монтировании компонента будет проверять токен\r\n    useEffect(() => {\r\n        tokenCheck()\r\n    }, [])\r\n\r\n    function handleRegisterSuccess() {\r\n        setRegisterSuccess(true)\r\n    }\r\n    function handleRegisterFail() {\r\n        setRegisterSuccess(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"page\">\r\n            <div className=\"page__container\">\r\n                <CurrentUserContext.Provider value={currentUser}>\r\n                    <Header onSignOut={onSignOut} userEmail={userEmail} />\r\n                    <Switch>\r\n                        <Route path=\"/sign-in\">\r\n                            <Login handleLogin={handleLogin} />\r\n                        </Route>\r\n                        <Route path=\"/sign-up\">\r\n                            <Register\r\n                                handleRegisterSuccess={handleRegisterSuccess}\r\n                                handleRegisterFail={handleRegisterFail}\r\n                                infoTooltipOpen={infoTooltipOpen}\r\n                            />\r\n                        </Route>\r\n                        <ProtectedRoute\r\n                            path=\"/\"\r\n                            loggedIn={loggedIn}\r\n                            onEditProfile={handleEditProfileClick}\r\n                            onAddPlace={handleAddPlaceClick}\r\n                            onEditAvatar={handleEditAvatarClick}\r\n                            handleCardClick={handleCardClick}\r\n                            cards={cards}\r\n                            onCardLike={handleCardLike}\r\n                            onCardDelete={handleCardDelete}\r\n                            component={Main}\r\n                        />\r\n                    </Switch>\r\n\r\n                    {loggedIn && <Footer />}\r\n                    <InfoTooltip\r\n                        isOpen={isInfoTooltipOpen}\r\n                        onClose={closeAllPopups}\r\n                        isSuccess={registerSuccess}\r\n                    />\r\n                    <EditProfilePopup\r\n                        isOpen={isEditProfilePopupOpen}\r\n                        onClose={closeAllPopups}\r\n                        onUpdateUser={handleUpdateUser}\r\n                    />\r\n\r\n                    <AddPlacePopup\r\n                        isOpen={isAddPlacePopupOpen}\r\n                        onClose={closeAllPopups}\r\n                        onAddPlace={handleAddPlaceSubmit}\r\n                    />\r\n\r\n                    <EditAvatarPopup\r\n                        isOpen={isEditAvatarPopupOpen}\r\n                        onClose={closeAllPopups}\r\n                        onUpdateAvatar={handleUpdateAvatar}\r\n                    />\r\n\r\n                    <PopupWithSubmit\r\n                        title=\"Вы уверены?\"\r\n                        name=\"card-delete\"\r\n                        card={selectedCard}\r\n                        cardDOM={selectedCardDOM}\r\n                        buttonText=\"Да\"\r\n                        isOpen={isCardDeletePopupOpen}\r\n                        onClose={closeAllPopups}\r\n                        onCardDeleteSubmit={handleCardDeleteSubmit}\r\n                    ></PopupWithSubmit>\r\n\r\n                    <ImagePopup\r\n                        name=\"picture-zoom\"\r\n                        isOpen={isImgPopupOpen}\r\n                        card={selectedCard}\r\n                        onClose={closeAllPopups}\r\n                    />\r\n                </CurrentUserContext.Provider>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n)\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error)\r\n        })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister()\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './components/App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n        <App />\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}